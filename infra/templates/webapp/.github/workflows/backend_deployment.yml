name: Deploy Backend to Yandex Serverless Containers

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/backend_deployment.yml'

jobs:
  deploy:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Yandex Container Registry
        uses: docker/login-action@v3
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/${{ secrets.YC_CONTAINER_NAME }}:${{ github.sha }},cr.yandex/${{ secrets.YC_REGISTRY_ID }}/${{ secrets.YC_CONTAINER_NAME }}:latest
          cache-from: type=registry,ref=cr.yandex/${{ secrets.YC_REGISTRY_ID }}/${{ secrets.YC_CONTAINER_NAME }}:latest
          cache-to: type=inline

      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

      - name: Setup Yandex Cloud credentials
        run: |
          echo '${{ secrets.YC_SA_JSON_CREDENTIALS }}' > sa-key.json
          yc config profile create sa-profile
          yc config set service-account-key sa-key.json
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

      - name: Deploy to Yandex Serverless Containers
        env:
          YC_CONTAINER_NAME: ${{ secrets.YC_CONTAINER_NAME }}
          YC_REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
          YC_SERVICE_ACCOUNT_ID: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
          YC_NETWORK_ID: ${{ secrets.YC_NETWORK_ID }}
          YC_SUBNET_IDS: ${{ secrets.YC_SUBNET_IDS }}
        run: |
          # Создаем или обновляем контейнер
          yc serverless container revisions deploy \
            --container-name "${YC_CONTAINER_NAME}" \
            --image "cr.yandex/${YC_REGISTRY_ID}/${YC_CONTAINER_NAME}:${{ github.sha }}" \
            --folder-id "${YC_FOLDER_ID}" \
            --memory 1GB \
            --cores 1 \
            --concurrency 8 \
            --execution-timeout 60s \
            --network-id "${YC_NETWORK_ID}" \
            --subnets "${YC_SUBNET_IDS}" \
            --environment DJANGO_SETTINGS_MODULE=project.settings \
            --environment DATABASE_URL="${DATABASE_URL}" \
            --environment SECRET_KEY="${DJANGO_SECRET_KEY}" \
            --environment ALLOWED_HOSTS="${ALLOWED_HOSTS}" \
            --environment DEBUG=False \
            --environment CORS_ALLOWED_ORIGINS="${CORS_ALLOWED_ORIGINS}" \
            --service-account-id "${YC_SERVICE_ACCOUNT_ID}"

          # Получаем URL контейнера
          CONTAINER_URL=$(yc serverless container get "${YC_CONTAINER_NAME}" --format json | jq -r '.url')
          echo "Deployed container URL: $CONTAINER_URL"

          # Сохраняем URL контейнера для использования в следующих шагах
          echo "CONTAINER_URL=$CONTAINER_URL" >> $GITHUB_ENV

          echo "Миграции запускаются автоматически при старте контейнера через entrypoint.sh"
          echo "Ожидаем 10 секунд, чтобы контейнер инициализировался и запустил миграции..."
          sleep 10

      - name: Update or Create API Gateway
        env:
          YC_CONTAINER_NAME: ${{ secrets.YC_CONTAINER_NAME }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
          YC_API_GATEWAY_NAME: ${{ secrets.YC_API_GATEWAY_NAME }}
          YC_SERVICE_ACCOUNT_ID: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
        run: |
          # Получаем ID ревизии контейнера
          CONTAINER_ID=$(yc serverless container get "${YC_CONTAINER_NAME}" --format json | jq -r '.id')

          # Создаем временный файл спецификации API Gateway
          cat > api-gw-spec.yaml << EOF
          openapi: 3.0.0
          info:
            title: Django Backend API
            version: 1.0.0
          paths:
            /:
              get:
                x-yc-apigateway-integration:
                  type: serverless_containers
                  container_id: $CONTAINER_ID
                  service_account_id: "${YC_SERVICE_ACCOUNT_ID}"
              post:
                x-yc-apigateway-integration:
                  type: serverless_containers
                  container_id: $CONTAINER_ID
                  service_account_id: "${YC_SERVICE_ACCOUNT_ID}"
            /{path}:
              x-yc-apigateway-any-method:
                parameters:
                  - name: path
                    in: path
                    required: true
                    schema:
                      type: string
                x-yc-apigateway-integration:
                  type: serverless_containers
                  container_id: $CONTAINER_ID
                  service_account_id: "${YC_SERVICE_ACCOUNT_ID}"
          EOF

          # Проверяем, существует ли API Gateway
          API_GATEWAY_EXISTS=$(yc serverless api-gateway list --format=json | jq -r --arg name "${YC_API_GATEWAY_NAME}" '.[] | select(.name==$name) | .id')

          if [ -z "$API_GATEWAY_EXISTS" ]; then
            echo "API Gateway '${YC_API_GATEWAY_NAME}' не существует, создаем..."
            yc serverless api-gateway create \
              --name "${YC_API_GATEWAY_NAME}" \
              --spec api-gw-spec.yaml \
              --folder-id "${YC_FOLDER_ID}"
          else
            echo "API Gateway '${YC_API_GATEWAY_NAME}' существует, обновляем..."
            yc serverless api-gateway update "${YC_API_GATEWAY_NAME}" \
              --spec api-gw-spec.yaml \
              --folder-id "${YC_FOLDER_ID}"
          fi

          # Получаем URL API Gateway
          API_GW_URL=$(yc serverless api-gateway get "${YC_API_GATEWAY_NAME}" --format json | jq -r '.domain')
          echo "API Gateway URL: $API_GW_URL"

          # Сохраняем URL API Gateway для использования в следующих шагах
          echo "API_GW_URL=$API_GW_URL" >> $GITHUB_ENV

      - name: Health check
        run: |
          echo "Проверяем доступность сервиса через API Gateway: https://$API_GW_URL"

          # Пробуем получить ответ от сервиса
          MAX_RETRIES=10
          COUNT=0
          while [ $COUNT -lt $MAX_RETRIES ]; do
            # Проверяем эндпоинт /health/
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://$API_GW_URL/health/")

            if [ "$HTTP_STATUS" = "200" ]; then
              echo "Сервис запущен и готов к работе!"
              break
            else
              echo "Получен статус $HTTP_STATUS, ожидаем готовности сервиса... (${COUNT}/${MAX_RETRIES})"
              sleep 5
              COUNT=$((COUNT+1))
            fi
          done

          if [ $COUNT -eq $MAX_RETRIES ]; then
            echo "Сервис не запустился после $MAX_RETRIES попыток!"
            exit 1
          fi